on:
  push:
    tags:
    - 'v*' # "v1.2.3"
    branches:
    - master
    paths-ignore: ['media/**', 'docs/**', '**/*.md']
    pull_request:
      paths-ignore: ['media/**', 'docs/**', '**/*.md']
    workflow_dispatch:
jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        target:
          - os: linux
            triple: x86_64-linux-musl
            name: linux
            cpu: amd64
            nim_cpu: amd64
            nimble_cpu: amd64
          - os: linux
            triple: i686-linux-musl
            name: linux
            cpu: i686
            nim_cpu: i386
            nimble_cpu: amd64
          - os: linux
            triple: aarch64-linux-musl
            name: linux
            cpu: arm64
            nim_cpu: arm64
            nimble_cpu: amd64
          - os: macos
            triple: x86_64-apple-darwin14
            name: macos
            cpu: amd64
            nim_cpu: amd64
            nimble_cpu: amd64
          - os: macos
            triple: aarch64-apple-darwin14
            name: macos
            cpu: arm64
            nim_cpu: arm64
            nimble_cpu: amd64
          - os: windows
            triple: x86_64-w64-mingw32
            name: windows
            cpu: amd64
            nim_cpu: amd64
            nimble_cpu: amd64
          - os: windows
            triple: i686-w32-mingw32
            name: windows
            cpu: i686
            nim_cpu: i386
            nimble_cpu: amd64
        include:
          - target:
              os: linux
            builder: ubuntu-20.04
          - target:
              os: macos
            builder: macos-11
          - target:
              os: windows
            builder: windows-2019
    defaults:
      run:
        shell: bash

    name: '${{ matrix.target.triple }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Setup Build
        if: matrix.builder == 'ubuntu-20.04'
        run: |
          sudo apt install gcc make gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu \
                                    gcc-i686-linux-gnu binutils-i686-linux-gnu \
                                    mingw-w64

      - name: Setup Build
        if: matrix.builder == 'windows-2019'
        run: |
          curl -LSsO https://github.com/brechtsanders/winlibs_mingw/releases/download/11.1.0-12.0.0-8.0.2-r1/winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-8.0.2-r1.7z
          echo "588794e11be36389501610cf78de777e52a920e03db256ee8bd1a7c2c45e39a4 winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-8.0.2-r1.7z" | sha256sum -c
          7z x winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-8.0.2-r1.7z

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nimble
        uses: nim-lang/nimble/.github/actions/install_nimble@master
        with:
          os: ${{ matrix.target.name }}
          cpu: ${{ matrix.target.nimble_cpu }}

      - name: Restore nimble dependencies from cache
        id: nimble_deps
        uses: actions/cache@v3
        with:
          path: ~/.nimble/
          key: ${{ matrix.target.os }}-${{ env.cache_nonce }}

      - name: build nimlangserver
        run: |
          echo i386.linux.gcc.exe = \"i686-linux-gnu-gcc\" >> nimlangserver.nim.cfg
          echo i386.linux.gcc.linkerexe = \"i686-linux-gnu-gcc\" >> nimlangserver.nim.cfg
          echo i386.windows.gcc.exe = \"i686-w64-mingw32-gcc.exe\" >> nimlangserver.nim.cfg
          echo i386.windows.gcc.linkerexe = \"i686-w64-mingw32-gcc.exe\" >> nimlangserver.nim.cfg
          if [ ${{ matrix.target.triple }} = 'i686-w32-mingw32' ]; then
            export PATH=`pwd`\\mingw32\\bin;$PATH
          fi
          if [ ${{ matrix.target.triple }} = 'aarch64-apple-darwin14' ]; then
            echo "--passC:\"-target arm64-apple-macos11\"" >> nimlangserver.nim.cfg
            echo "--passL:\"-target arm64-apple-macos11\"" >> nimlangserver.nim.cfg
            cat nimlangserver.nim.cfg
            nimble build -d:release --cpu:arm64 --os:macosx
          else
            nimble build -d:release --cpu:${{ matrix.target.nim_cpu }}
          fi

      - name: Compress the Nim Language Server binaries
        run: |
          tar -czvf nimlangserver-${{ matrix.target.name }}-${{ matrix.target.cpu }}.tar.gz `ls nimlangserver{,.exe} 2>/dev/null || true`

      - name: Upload the Nim Language Server Binaries
        uses: actions/upload-artifact@v4
        with:
          name: nimlangserver-${{ matrix.target.name }}-${{ matrix.target.cpu }}.tar.gz
          path: nimlangserver-${{ matrix.target.name }}-${{ matrix.target.cpu }}.tar.gz

  create-macos-universal-binary:
    name: Create a Universal macOS binary
    needs: [build]
    runs-on: macos-11
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nimlangserver-macos-*.tar.gz

      - name: Extract binaries for amd64-macos
        shell: bash
        run: |
          tar -xvf nimlangserver-macos-amd64.tar.gz/nimlangserver-macos-amd64.tar.gz
          mv nimlangserver nimlangserver-amd64

      - name: Extract binaries for arm64-macos
        shell: bash
        run: |
          tar -xvf nimlangserver-macos-arm64.tar.gz/nimlangserver-macos-arm64.tar.gz
          mv nimlangserver nimlangserver-arm64

      - name: Build Universal binary
        shell: bash
        run: |
          lipo -create -output nimlangserver nimlangserver-amd64 nimlangserver-arm64

      - name: Compress the Nim Language Server binaries
        shell: bash
        run: |
          tar -czvf nimlangserver-macos-universal.tar.gz nimlangserver

      - name: Upload the Nim Language Server Binaries
        uses: actions/upload-artifact@v4
        with:
          name: nimlangserver-macos-universal.tar.gz
          path: nimlangserver-macos-universal.tar.gz

  create-github-release:
    name: Create Github Release
    needs: [build, create-macos-universal-binary]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4

      - uses: ncipollo/release-action@v1
        with:
          name: Latest Nimlangserver Binaries
          artifacts: "*/*"
          allowUpdates: true
          makeLatest: true
          prerelease: true
          tag: latest

      - name: Delete artefacts
        uses: geekyeggo/delete-artifact@v4
        with:
          failOnError: false
          name: "nimlangserver-*"
